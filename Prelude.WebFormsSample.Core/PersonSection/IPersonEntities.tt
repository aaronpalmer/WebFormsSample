<#
'*********************************************************
'
'    Copyright (c) Microsoft. All rights reserved.
'    This code is licensed under the Microsoft Public License.
'    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
'    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
'    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
'    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
'
'*********************************************************
#>
<#@ template language="VB" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.VB.ttinclude"#><#@
 output extension=".vb"#><#

Dim loader As New MetadataLoader(Me)
Dim region As New CodeRegion(Me)
Dim inputFile As String = "..\..\Prelude.WebFormsSample.Data\PersonSection\PersonModel.edmx"
Dim ItemCollection As EdmItemCollection = loader.CreateEdmItemCollection(inputFile)

Code = New CodeGenerationTools(Me)
EFTools = New MetadataTools(Me)
ObjectNamespace = Code.VsNamespaceSuggestion()
ModelNamespace = loader.GetModelNamespace(inputFile)

Dim container As EntityContainer = ItemCollection.GetItems(Of EntityContainer)().FirstOrDefault()
If container Is Nothing Then
    Return String.Empty
End If
#>
'------------------------------------------------------------------------------
' <auto-generated>
'    This code was generated from a template.
'
'    Manual changes to this file may cause unexpected behavior in your application.
'    Manual changes to this file will be overwritten if the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Data.Entity
Imports System.Data.Entity.Infrastructure
<#
If container.FunctionImports.Any()
#>
Imports System.Data.Objects
<#
End If
#>

<#
If Not String.IsNullOrEmpty(ObjectNamespace) Then
#>
Namespace <#=Code.EscapeNamespace(ObjectNamespace)#>

<#
    PushIndent(CodeRegion.GetIndent(1))
End If

#>
<#=Accessibility.ForType(container)#> Interface I<#=Code.Escape(container)#>

	ReadOnly Property Context as DbContext
<#
    For Each entitySet As EntitySet In container.BaseEntitySets.OfType(Of EntitySet)()
#>
    Property <#=Code.Escape(entitySet)#>() As DbSet(Of <#=Code.Escape(entitySet.ElementType)#>)
<#
    Next

    For Each edmFunction As EdmFunction In container.FunctionImports
        WriteFunctionImport(edmFunction, False)
    Next
#>

End Interface
<#

If Not String.IsNullOrEmpty(ObjectNamespace) Then
    PopIndent()
#>

End Namespace
<#
End If

#>
<#+
Property ModelNamespace As String
Property ObjectNamespace As String
Property Code As CodeGenerationTools
Property EFTools As MetadataTools

Sub WriteLazyLoadingEnabled(ByVal container As EntityContainer)
    Dim lazyLoadingAttributeValue As String = Nothing
    Dim lazyLoadingAttributeName As String = MetadataConstants.EDM_ANNOTATION_09_02 & ":LazyLoadingEnabled"
    If MetadataTools.TryGetStringMetadataPropertySetting(container, lazyLoadingAttributeName, lazyLoadingAttributeValue) Then
        Dim isLazyLoading As Boolean
        If Boolean.TryParse(lazyLoadingAttributeValue, isLazyLoading) AndAlso Not isLazyLoading Then
#>
        MyBase.Configuration.LazyLoadingEnabled = False
<#+
        End If
    End If
End Sub

Sub WriteFunctionImport(edmFunction As EdmFunction, includeMergeOption As Boolean)
	Dim parameters As List(Of FunctionImportParameter) = FunctionImportParameter.Create(edmFunction.Parameters, Code, EFTools)
	Dim paramList As String = [String].Join(", ", parameters.Select(Function(p) p.FunctionParameterName & " As " & p.FunctionParameterType).ToArray())
	Dim returnType As TypeUsage = If(edmFunction.ReturnParameter Is Nothing, Nothing, EFTools.GetElementType(edmFunction.ReturnParameter.TypeUsage))
	Dim processedReturn As String = If(returnType Is Nothing, "Integer", "ObjectResult(Of " & MultiSchemaEscape(returnType) & ")")

	If includeMergeOption Then
		paramList = Code.StringAfter(paramList, ", ") & "mergeOption As MergeOption"
	End If
#>

    Function <#=Code.Escape(edmFunction)#>(<#=paramList#>) As <#=processedReturn#> 
<#+
	If Not includeMergeOption AndAlso returnType IsNot Nothing AndAlso returnType.EdmType.BuiltInTypeKind = BuiltInTypeKind.EntityType Then
		WriteFunctionImport(edmFunction, True)
	End If
End Sub

Function AccessibilityAndVirtual(accessibility As String) As String
	Return accessibility & (If(accessibility <> "Private", " Overridable", ""))
End Function

Function MultiSchemaEscape(usage As TypeUsage) As String
	Dim type = TryCast(usage.EdmType, StructuralType)
	Return If(type IsNot Nothing AndAlso type.NamespaceName <> ModelNamespace, Code.CreateFullName(Code.EscapeNamespace(type.NamespaceName), Code.Escape(type)), Code.Escape(usage))
End Function

#>